
import re
import timeit
import matplotlib.pyplot as plt
from collections import defaultdict


def kmp_search(pattern, text):
    def compute_lps_array(pattern, M, lps):
        length = 0
        lps[0] = 0
        i = 1
        while i < M:
            if pattern[i] == pattern[length]:
                length += 1
                lps[i] = length
                i += 1
            else:
                if length != 0:
                    length = lps[length - 1]
                else:
                    lps[i] = 0
                    i += 1

    M = len(pattern)
    N = len(text)
    lps = [0] * M
    j = 0
    compute_lps_array(pattern, M, lps)
    i = 0
    while i < N:
        if pattern[j] == text[i]:
            i += 1
            j += 1
        if j == M:
            return True
        elif i < N and pattern[j] != text[i]:
            if j != 0:
                j = lps[j - 1]
            else:
                i += 1
    return False

def lcs(s1, s2):
    m = len(s1)
    n = len(s2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    for i in range(m + 1):
        for j in range(n + 1):
            if i == 0 or j == 0:
                dp[i][j] = 0
            elif s1[i - 1] == s2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
    return dp[m][n]

def rabin_karp_search(pattern, text, prime=101):
    m = len(pattern)
    n = len(text)
    p_hash = 0
    t_hash = 0
    h = 1
    for i in range(m - 1):
        h = (h * prime) % n
    for i in range(m):
        p_hash = (prime * p_hash + ord(pattern[i])) % n
        t_hash = (prime * t_hash + ord(text[i])) % n
    for i in range(n - m + 1):
        if p_hash == t_hash:
            for j in range(m):
                if text[i + j] != pattern[j]:
                    break
            else:
                return True
        if i < n - m:
            t_hash = (prime * (t_hash - ord(text[i]) * h) + ord(text[i + m])) % n
            if t_hash < 0:
                t_hash += n
    return False


def get_library_parts(library, n_parts=20):
    library_len = len(library)
    part_len = library_len // n_parts
    return [library[i:i + part_len] for i in range(0, library_len, part_len)]

def main():
    with open("library.txt", "r") as file:
        library = file.read()
    with open("paper.txt", "r") as file:
        paper = file.read()

    # Preprocessing the texts
    library = re.sub(r'\W+', ' ', library).lower()
    paper = re.sub(r'\W+', ' ', paper).lower()

    library_parts = get_library_parts(library)

    x = [len(''.join(library_parts[:i+1])) / 1024 for i in range(len(library_parts))]
    kmp_times = []
    lcs_times = []
    rabin_karp_times = []

    for i in range(len(library_parts)):
        current_library = ''.join(library_parts[:i+1])

        kmp_time = timeit.timeit(lambda: kmp_search(paper, current_library), number=1)
        lcs_time = timeit.timeit(lambda: lcs(paper, current_library), number=1)
        rabin_karp_time = timeit.timeit(lambda: rabin_karp_search(paper, current_library), number=1)

        kmp_times.append(kmp_time)
        lcs_times.append(lcs_time)
        rabin_karp_times.append(rabin_karp_time)

    plt.plot(x, kmp_times, label='KMP')
    plt.plot(x, lcs_times, label='LCSS')
    plt.plot(x, rabin_karp_times, label='Rabin-Karp')

    plt.xlabel('Library size (KB)')
    plt.ylabel('Running time (s)')
    plt.title('Algorithm running times for different library sizes')
    plt.legend()
    plt.grid()
    plt.show()

if __name__ == "__main__":
    main()
