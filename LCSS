import time
import matplotlib.pyplot as plt

def read_file(file_path):
    with open(file_path, 'r', encoding='utf-8') as f:
        return f.read().split()

def lcs_length(a, b):
    len_a, len_b = len(a), len(b)
    dp = [[0] * (len_b + 1) for _ in range(len_a + 1)]

    for i in range(1, len_a + 1):
        for j in range(1, len_b + 1):
            if a[i - 1] == b[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

    return dp[len_a][len_b]

def is_plagiarized(library_file, suspected_file):
    library_words = read_file(library_file)
    suspected_words = read_file(suspected_file)

    lcs_len = lcs_length(library_words, suspected_words)
    plagiarism_ratio = lcs_len / len(suspected_words)

    return plagiarism_ratio > 0.5, plagiarism_ratio

def measure_time(library_file, suspected_file, num_parts=20):
    library_words = read_file(library_file)
    suspected_words = read_file(suspected_file)

    library_length = len(library_words)
    part_length = library_length // num_parts
    execution_times = []

    for i in range(1, num_parts + 1):
        start_index = 0
        end_index = i * part_length
        partial_library = library_words[start_index:end_index]

        start_time = time.time()
        lcs_len = lcs_length(partial_library, suspected_words)
        end_time = time.time()

        execution_times.append(end_time - start_time)

    return execution_times

library_file = 'library.txt'
suspected_file = 'paper.txt'

# Measure execution times
execution_times = measure_time(library_file, suspected_file)

# Plot the results
plt.plot(range(1, 21), execution_times)
plt.xlabel("Library Size (Parts)")
plt.ylabel("Execution Time (Seconds)")
plt.title("Time Complexity of LCSS Algorithm")
plt.show()
